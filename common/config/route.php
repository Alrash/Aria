<?php
/**
 * Author: Alrash
 * Date: 2017/02/08 13:32
 * Description: 该文件是url配置文件
 *
 * -------------------------------------------
 * 注：该文件会被项目下文件覆盖
 * -------------------------------------------
 *
 * 通用配置格式：
 * (1) 分别配置（依赖APP_ENV宏定义）
 * [
 *      'APP_ENV 1' => [具体配置],
 *      'APP_ENV 2' => [具体配置],
 *      ...
 * ]
 * (2) 共用配置（所有项目共用的配置）
 * [
 *      具体配置
 * ]
 * ---------------------------------------------------------------------------------------------------------------------
 * 具体配置选项：
 * [
 *      'url_pretty'    => true / false,        是否启用url美化（可选，默认false）
 *                                                  false时，需要使用?route=具体路径；true时，route在url解析时不起作用
 *      'suffix'        => '',                  url后缀（可选，默认''）
 *                                                  如使用.htm => http://www.example.com/post/25252.htm
 *      'rule'          => [],                  路由规则（可选，默认[]）
 *                                                  url_pretty为true时使用
 * ]
 * ---------------------------------------------------------------------------------------------------------------------
 * rule规则使用方法：
 * (1) 规则每行形式
 *     待匹配路由 => 配置成功后，处理成的路由形式
 * (2) '*'
 *     表示匹配所有路由
 *     可使用参数'{origin}'，表示原样使用
 * (3) 'deny'
 *     表示禁止所有路由
 *     转向之后的选项
 * (4) 通用匹配规则
 *     使用正则表达式进行匹配
 *     1. 待匹配路由规则：
 *        1) 一个单位：
 *           /一个单位/另一个单位/最后一个单位
 *        2) 使用<name:regex>的形式编写一个单位：
 *           name代表该单位的名字，生成路由会使用到（名字中不能含有':'）
 *           regex表示正则表达式，应该能支持所有的（忽略大小写，不能含有'>'，转义的也不能）
 *        3) 单纯使用字符串编写一个单位：
 *           原样比较，相当于<$n:string>（n代表第几个仅是字符串的单位，从1开始计数，$0不解析，string表示你写的字符串）
 *     2. 生成路由
 *        依赖匹配路由规则，相对于匹配路由规则较为简单
 *        使用$n, <name>, string编写
 *        如：/$3/<id>/update，表示使用第三个字符常量单位，使用名字为id的正则表达式编写的单位，并且增加上update
 *           原始路由(去后缀) /wiki/article/1212/http => 生成的路由 /http/1212/update
 * (5) 'error'
 *     表示进行成功的通用规则匹配后，未能调用不存在的Class::action显示的页面
 * ---------------------------------------------------------------------------------------------------------------------
 * 实例：
 * [
 *  'url_pretty' => true,
 *  'suffix'     => '.htm',
 *  'rule'       => [
 *      '/index/<action:\w+>' => '/$1/<action>/hello',     #   /index/index.htm => /index/index/hello
 *      '/post/<id:\d+>'      => '/$1/show/<id>',          #   /post/25252.htm => /post/show/25252
 *      '/user/<name:\w+>/register' => '/$2/$1/<name>',    #   /user/alrash/register.htm => /register/user/alrash
 *      '*' => '/'                                         #   /alrash/doSomething  => /
 *      '*' => '{origin}',                                 #   /alrash/abc.htm => /alrash/abc | /alrash/abc => /alrash/abc
 *      'deny' => '/',                                     #   /alrash/doSomething => /
 *      'error' => '/error/404'                            #   除'*'/'deny'，匹配之后，实例化错误时的转向
 *  ],
 * ]
 * ps: 为从上向下匹配，匹配成功后，不再进行匹配
 *
 * 注：
 *  Route进行解析时，使用/\/([a-z][a-z0-9]*)/i匹配常量字符串，所以除常量字符串外尽量不要出现'/'直接接字符串
 */

return [
    'url_pretty' => true,
    'suffix' => '',
    'rule' => [
    ],
];