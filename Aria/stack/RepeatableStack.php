<?php
/**
 * Author: Alrash
 * Date: 2017/01/28 23:36
 * Description: 可重复栈
 * 意思是，检测栈内元素出现次数，超出设定值，则push时返回false
 */

namespace Aria\stack;

use Aria\algorithm\Stack;
use Aria\base\ParamException;

/**
 * Class RepeatableStack
 * @package Aria\stack
 */
class RepeatableStack extends Stack {
    const level_loose = 10;
    const level_tight = 3;
    const level_unique = 1;

    /**
     * @var int
     */
    private $level;

    //存放栈内元素与其数值的映射
    private $counts;
    private $countMap;

    /**
     * RepeatableStack constructor.
     * @param int $level
     * @throws ParamException
     */
    public function __construct($level = self::level_loose) {
        parent::__construct();

        if (!is_int($level))
            throw new ParamException('The type of param $level needs int within the constructor of class ' . get_called_class() . '!');

        $this->level = $level;
        $this->counts = [];
        $this->countMap = [];
    }

    /**
     * 入栈
     * @param $object
     * @return bool
     */
    public function push($object): bool {
        if (!$this->checkObject($object))
            return false;

        parent::push($object); // TODO: Change the autogenerated stub

        if (in_array($object, $this->countMap, true)) {
            $this->counts[array_search($object, $this->countMap, true)]++;
        } else {
            array_push($this->countMap, $object);
            $this->counts[array_search($object, $this->countMap, true)] = 1;
        }

        return true;
    }

    /**
     * 出栈
     */
    public function pop() {
        if ($this->isEmpty())
            return;

        $object = $this->top();
        $key = array_search($object, $this->countMap);
        $this->counts[$key]--;

        if ($this->counts[$key] === 0) {
            unset($this->counts[$key]);
            unset($this->countMap[$key]);
        }

        parent::pop(); // TODO: Change the autogenerated stub
    }

    /**
     * 检测栈内元素是否超出阀值
     * @param $object
     * @return bool
     */
    protected function checkObject($object) {
        if (!in_array($object, $this->countMap, true))
            return true;
        return $this->counts[array_search($object, $this->countMap, true)] < $this->level;
    }
}