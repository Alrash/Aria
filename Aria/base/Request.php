<?php
/**
 * Author: Alrash
 * Date: 2017/01/17 12:31
 * Description: 请求类，用于获取一些请求信息
 *
 * 注：
 *  (1) 原本想将除session和cookie全部注销掉，使用类内函数获取，现已移除
 *  (2) 未丰富功能，仅含有提交判断
 */

namespace Aria\base;

class Request extends Object {
    use SingletonTrait, SetMethodLimitTrait;

    const POST = '_POST';
    const GET = '_GET';
    const FILE = '_FILE';
    const ENV = '_ENV';
    const SERVER = '_SERVER';
    const REQUEST = '_REQUEST';

    private $_post;
    private $_get;
    private $_file;
    private $_env;
    private $_request;
    private $_server;

    private $browse;
    private $os;
    private $host;
    private $originRoute;

    /**
     * @param array $config
     * @param array $params
     */
    public function init(array $config = [], array $params = []) {
        $this->__init__($config, $params); // TODO: Change the autogenerated stub

        $this->setGet($_GET);
        $this->setPost($_POST);
        $this->setFile($_FILES);
        $this->setEnv($_ENV);
        $this->setRequest($_REQUEST);
        $this->setServer($_SERVER);

        $this->getBrowseFromHeader($_SERVER['HTTP_USER_AGENT']);
        $this->getOSFromHeader($_SERVER['HTTP_USER_AGENT']);
        $this->setHost($_SERVER['REMOTE_ADDR']);
    }

    /**
     * 设置$var为null，若为数组则全部设置为null
     * @param mixed $var 待取消参数
     * */
    private function unsetVariable(&$var) {
        if (!isset($var))
            return;

        if (!is_array($var)) {
            unset($var);
        } else {
            foreach ($var as $key => $value) {
                unset($var[$key]);
            }
        }
    }

    /**
     * @param mixed $post
     */
    protected function setPost(&$post) {
        $this->_post = $post;
        $this->unsetVariable($post);
    }

    /**
     * @param mixed $get
     */
    protected function setGet(&$get) {
        $this->_get = $get;
        $this->unsetVariable($get);
    }

    /**
     * @param mixed $file
     */
    protected function setFile(&$file) {
        $this->_file = $file;
        $this->unsetVariable($file);
    }

    /**
     * @param mixed $env
     */
    protected function setEnv(&$env) {
        $this->_env = $env;
        $this->unsetVariable($env);
    }

    /**
     * @param mixed $request
     */
    protected function setRequest(&$request) {
        $this->_request = $request;
        //$this->_request = [];
        $this->unsetVariable($request);
    }

    /**
     * @param mixed $server
     */
    protected function setServer($server) {
        $this->_server = $server;
    }

    /**
     * from: http://blog.jjonline.cn/phptech/168.html
     * @param mixed $headerInfo
     */
    protected function getBrowseFromHeader($headerInfo) {
        if (stripos($headerInfo, 'Firefox/') > 0) {
            preg_match('/Firefox\/([^;)]+)+/i', $headerInfo, $ver);
            $exp[0] = 'Firefox';
            $exp[1] = $ver[1];  //获取火狐浏览器的版本号
        } elseif (stripos($headerInfo, 'Maxthon') > 0) {
            preg_match('/Maxthon\/([\d\.]+)/', $headerInfo, $ver);
            $exp[0] = '傲游';
            $exp[1] = $ver[1];
        } elseif (stripos($headerInfo, 'MSIE') > 0) {
            preg_match('/MSIE\s+([^;)]+)+/i', $headerInfo, $ver);
            $exp[0] = 'IE';
            $exp[1] = $ver[1];  //获取IE的版本号
        } elseif (stripos($headerInfo, 'OPR') > 0) {
            preg_match('/OPR\/([\d\.]+)/', $headerInfo, $ver);
            $exp[0] = 'Opera';
            $exp[1] = $ver[1];
        } elseif (stripos($headerInfo, 'Edge') > 0) {
            //win10 Edge浏览器 添加了chrome内核标记 在判断Chrome之前匹配
            preg_match('/Edge\/([\d\.]+)/', $headerInfo, $ver);
            $exp[0] = 'Edge';
            $exp[1] = $ver[1];
        } elseif (stripos($headerInfo, 'Chrome') > 0) {
            preg_match('/Chrome\/([\d\.]+)/', $headerInfo, $ver);
            $exp[0] = 'Chrome';
            $exp[1] = $ver[1];  //获取google chrome的版本号
        } elseif (stripos($headerInfo, 'rv:') > 0 && stripos($headerInfo, 'Gecko') > 0) {
            preg_match('/rv:([\d\.]+)/', $headerInfo, $ver);
            $exp[0] = 'IE';
            $exp[1] = $ver[1];
        } else {
            $exp[0] = 'Others';
            $exp[1] = '';
        }

        $this->browse = $exp[0] . ' ver.' . $exp[1];
    }

    /**
     * origin from(changed): http://blog.jjonline.cn/phptech/168.html
     * @param mixed $headerInfo
     */
    protected function getOSFromHeader($headerInfo) {
        if (preg_match('/win/i', $headerInfo)) {
            if (strpos($headerInfo, '95')) {
                $os = 'Windows 95';
            } elseif (preg_match('/98/i', $headerInfo)) {
                $os = 'Windows 98';
            } elseif (preg_match('/nt 6.0/i', $headerInfo)) {
                $os = 'Windows Vista';
            } elseif (preg_match('/nt 6.1/i', $headerInfo)) {
                $os = 'Windows 7';
            } elseif (preg_match('/nt 6.2/i', $headerInfo)) {
                $os = 'Windows 8';
            } elseif (preg_match('/nt 10.0/i', $headerInfo)) {
                $os = 'Windows 10';
            } elseif (preg_match('/nt 5.1/i', $headerInfo)) {
                $os = 'Windows XP';
            } elseif (preg_match('/nt 5/i', $headerInfo)) {
                $os = 'Windows 2000';
            } else {
                $os = 'Windows';
            }
        } elseif (preg_match('/linux/i', $headerInfo)) {
            $os = 'Linux';
        } elseif (preg_match('/unix/i', $headerInfo)) {
            $os = 'Unix';
        } elseif (preg_match('/sun/i', $headerInfo) && preg_match('/os/i', $headerInfo)) {
            $os = 'SunOS';
        } elseif (preg_match('/BSD/i', $headerInfo)) {
            $os = 'BSD';
        } else {
            $os = 'Others';
        }

        $this->os = $os;
    }

    protected function setHost($host) {
        $this->host = $host;
    }

    /**
     * @param mixed $originRoute
     */
    public function setOriginRoute($originRoute) {
        $this->originRoute = $originRoute;
    }

    /**
     * @return boolean
     */
    public function isPost() {
        if (isset($_SERVER['REQUEST_METHOD'])) {
            return strtolower($_SERVER['REQUEST_METHOD']) === 'post';
        }
        return false;
    }

    /**
     * @return boolean
     */
    public function isGet() {
        if (isset($_SERVER['REQUEST_METHOD'])) {
            return strtolower($_SERVER['REQUEST_METHOD']) === 'get';
        }
        return false;
    }

    /**
     * @return boolean
     */
    public function isAjax() {
        if (isset($_SERVER['HTTP_X_REQUESTED_WITH'])) {
            return strtolower($_SERVER['HTTP_X_REQUESTED_WITH']) === 'xmlhttprequest';
        }
        return false;
    }

    /**
     * @return boolean
     */
    public function isPut() {
        if (isset($_SERVER['REQUEST_METHOD'])) {
            return strtolower($_SERVER['REQUEST_METHOD']) === 'put';
        }
        return false;
    }

    /**
     * @return boolean
     */
    public function isDelete() {
        if (isset($_SERVER['REQUEST_METHOD'])) {
            return strtolower($_SERVER['REQUEST_METHOD']) === 'delete';
        }
        return false;
    }

    /**
     * @return mixed
     */
    public function getOriginRoute() {
        return $this->originRoute;
    }

    /**
     * @return mixed
     */
    public function getPost() {
        return $this->_post;
    }

    /**
     * @return mixed
     */
    public function getGet() {
        return $this->_get;
    }

    /**
     * @return mixed
     */
    public function getFile() {
        return $this->_file;
    }

    /**
     * @return mixed
     */
    public function getEnv() {
        return $this->_env;
    }

    /**
     * @return mixed
     */
    public function getRequest() {
        return $this->_request;
    }

    /**
     * @return mixed
     */
    public function getServer() {
        return $this->_server;
    }

    /**
     * @return mixed
     */
    public function getBrowse() {
        return $this->browse;
    }

    /**
     * @return mixed
     */
    public function getOS() {
        return $this->os;
    }

    /**
     * @return mixed
     */
    public function getHost() {
        return $this->host;
    }
}